Voici les modifications effectuées sur le projet "Cameroa v1.9" (D. Romeuf - 2006), compilées ici par Mael Valais - 2014.


----------(Fichiers pointcomm.h)
Il y a eu des changements dans ssl.h entre la version de 2006 et celle d'aujourd'hui : pas mal de membres sont passés en "const". C'est le cas sur :
	const SSL_METHOD*
	const SSL_CIPHER*
Il a juste fallu corriger tout cela dans le code existant ; pas besoin d'includes différents (ou de librairies différentes) de celles de 2014.


---------(Fichiers ApnCamData_*.c/.h)
Ensuite, j'ai réglé les pbms avec 
	#if _MVS_VER > 1000 
en le remplaçant par 
	#if defined(_MVS_VER) && _MVS_VER > 1000

---------(Fichier Apn.h et stdafx.h)
Ensuite, j'ai tenté de régler le problème du #if LINUX, qui ne semble pas marcher sur cette machine. Explications : https://gcc.gnu.org/onlinedocs/cpp/System-specific-Predefined-Macros.html#System-specific-Predefined-Macros
Par la commande
# touch essai.h; cpp -dM essai.h; rm essai.h
on obtient la liste des macros prédéfinies pour ce système. La macro "LINUX" n'existe pas, mais la macro __linux__ existe. ! Donc on changera tous les 
	#if LINUX 
par 
	#if defined(LINUX) || defined(__linux__)
dans les deux fichiers.


---------(Pbm avec libcrypto.so.10)
Voici l'erreur :
# /usr/bin/ld: pointscomm.o: undefined reference to symbol 'BIO_ctrl@@libcrypto.so.10'
# /usr/bin/ld: note: 'BIO_ctrl@@libcrypto.so.10' is defined in DSO /lib/libcrypto.so.10 so try adding it to the linker command line
# /lib/libcrypto.so.10: could not read symbols: Invalid operation
Apparemment, il s'agit d'un problème d'ordre d'appel des librairies (http://stackoverflow.com/questions/17812344/undefined-reference-to-symbol-bio-ctrllibcrypto-so-10). La seule résolution donnée par Loic Jahan est d'ajouter le flag de linkage "LDFLAGS=-lcrypto"

Les paramètres d'édition de liens, de préproc et de compilation sont situés dans src/Makefile.am


---------(Erreur de lancement de ./cameroa lors de l'initialisation du driver)
Avec le script :
# ./cameroa -arretsysteme o -chemcameroa /CamerOA-3 -chemficaoa /CamerOA-3/ssl/CertificatCA_OA.pem -chemficertserveur /CamerOA-3/ssl/CertificatServeurCamerOA3.pem -chemficleprivserveur /CamerOA-3/ssl/ClePriveeServeurCamerOA3.pem -chemfiparamdh /CamerOA-3/ssl/Parametres-Diffie-Hellman-CamerOA3.pem -mdpcleprivserveur imagerie3 -adresseclientautorise 192.168.6.1 -portcanalcommandes 33443 -portcanaldonnees 33444
 On obtient l'erreur :
# APOGEE.DLL - CApnCamera::CApnCamera()APOGEE.DLL - CApnCamera::InitDriver() -> BEGINCamerOA: ERREUR: Impossible d'initialiser le systeme de la camera.
Vérifions si la caméra est bien connectée :
# lsusb
# Bus 002 Device 013: ID 125c:0010 Apogee Inc. Alta series CCD
Donc la caméra est bien connectée (ID vendeur = 4900 ou 0x125c).
En utilisant 
# gdb src/cameroa
j'ai pu identifier le problème : le device est bien trouvé mais la commande "open_usb" (ApogeeUsbLinux.cpp:106) renvoit une erreur. Je n'ai pas su dire si cette erreur était liée à la longueur de cable USB. Mais avec un test sur un autre device USB (en l'occurence un clavier USB), j'ai remarqué la même erreur. Je suis passé en root, et "open_usb" a cette fois bien fonctionné (sur le clavier USB). En revanche, je n'ai pas eu le temps de tester sur la caméra ALTA.

---> http://www.libusb.org/wiki/FAQ#CanIrunLinuxlibusbapplicationswithoutrootrootprivilege
Il faut en fait passer par "udev" pour accéder aux perifs USB sous Linux.

J'ai fait lsusb puis par comparaison avec/sans la caméra, j'ai trouvé que la commande suivante donnait les bonnes infos pour udev :
# udevadm info --attribute-walk --name=/dev/bus/usb/002/027
Après j'ai fait :


---------(Compiler l'executable cameroa-simulateur)
Apparemment, cameroa-simulateur permet de simuler le fonctionnement de cameroa sans caméra connectée. Ainsi, dans main.c, j'ai ajouté la macro _SIMULATEUR_APOGEE :
#ifndef _SIMULATEUR_APOGEE
		CameraCCD=new CApnCamera();
#else
		CameraCCD=new SimulateurApogeeUSB(false);
#endif

J'ai aussi ajouté un nouvel executable "cameroa_simulateur" dans src/Makefile.am, en ajoutant le LDFLAG -D_SIMULATEUR_APOGEE pour activer le simulateur

----------(Utiliser la librairie Qt-3.3 au lieu de Qt4)
Le problème vient d'abord de ce qui est mis dans le PATH :
# echo $PATH
# /usr/lib/qt4/bin:/usr/lib/qt4/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/home/admin/.local/bin:/home/admin/bin

Par défaut, au démarrage de la machine, tous les .sh du dossier /etc/profile.d sont exécutés. Ces scripts ajoutent au PATH un morceau, ou alors ajoutent des variables globales...
Dans notre cas, le fichier qt.sh (opur qt-3.3) est responsable de l'ajout dans la variable $PATH. J'ai modifié le nom en qt.sh.disabled et crée le fichier qt4.sh qui contient l'ajout du dossier de qt4 au PATH.
Du coup, les commandes qmake, moc, rcc, uic... sont lancées depuis le répertoire ciblé dans le $PATH.

Pour switcher entre qt-3.3 et qt4, il suffit donc de modifier le nom de qt4.sh en qt4.sh.qqchose et qt.sh.disabled en qt.sh.
